plugins {
    id 'fabric-loom'
    id 'maven-publish'
    id "org.jetbrains.kotlin.jvm"
    id "com.diffplug.spotless" version "5.12.5"
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    maven { url = "https://jitpack.io/" } // Databreaker
    maven { url = "https://maven.fabricmc.net/" } // Fabric
    maven { url = "https://maven.shedaniel.me/" } // REI
    maven { url = "https://maven.theillusivec4.top" } // Caelus
    maven { url = "https://maven.terraformersmc.com/releases" } // Mod Menu
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

    // Caelus API for elytra alternatives
    modImplementation "top.theillusivec4.caelus:caelus-fabric:${project.caelus_version}"
    include "top.theillusivec4.caelus:caelus-fabric:${project.caelus_version}"

    // Disabled until sodium updates to 1.17
    if (false) {
        implementation("me.jellysquid.mods:sodium-fabric") {
            version {
                branch = "1.16.x/next"
            }
            transitive = false
        }
        implementation("link.infra:Indium") {
            version {
                branch = "1.16.x/main"
            }
            transitive = false
        }
    }

    // Third party
    modRuntime "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"
    modRuntime "com.terraformersmc:modmenu:${project.modmenu_version}"
    // TODO: Build from src or re-enable once JitPack is fixed
    if (false) {
        modRuntime("com.github.SuperCoder7979:databreaker:${project.databreaker_version}") {
            transitive = false
        }
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    it.options.encoding = "UTF-8"

    // The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
    // JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
    // We'll use that if it's available, but otherwise we'll use the older option.
    def targetVersion = 8
    if (JavaVersion.current().isJava9Compatible()) {
        it.options.release = targetVersion
    }
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

jar {
    from ("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}

minecraft {
    accessWidener = file("src/main/resources/prima_materia.accesswidener")
}

compileKotlin.kotlinOptions {
    jvmTarget = "1.8"
    freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
}


spotless {
    ratchetFrom 'master'

    format 'misc', {
        // define the files to apply `misc` to
        target '*.gradle', '*.md', '.gitignore'

        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
    java {
        googleJavaFormat()
    }
    kotlin {
        ktfmt()
    }
}
